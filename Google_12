Imagine you have a special keyboard with the following keys: 
Key 1:  Prints 'A' on screen
Key 2: (Ctrl-A): Select screen
Key 3: (Ctrl-C): Copy selection to buffer
Key 4: (Ctrl-V): Print buffer on screen appending it
                 after what has already been printed. 

If you can only press the keyboard for N times (with the above four keys), write a program to produce maximum numbers of A's. That is to say, the input parameter is N (No. of keys that you can press), the output is M (No. of As that you can produce).

Input:

The first line of input contains an integer T denoting the number of test cases.
The first line of each test case is N,N is the number of key.

Output:

Print maximum number of A's.  Print -1, if N is greater than 75.

Constraints:

1 ≤ T ≤ 50
1 ≤ N ≤ 75

Example:

Input:
2
3
7

Output:
3
9

Explanation:

Input:  N = 3
Output: 3
We can at most get 3 A's on screen by pressing 
following key sequence.
A, A, A

Input:  N = 7
Output: 9
We can at most get 9 A's on screen by pressing 
following key sequence.
A, A, A, Ctrl A, Ctrl C, Ctrl V, Ctrl V
 
 Solution::
 
#include <stdio.h>
#include<algorithm>
#include<iostream>
using namespace std;
int main() 
{
	int i,j,t,n;
	long long int ans[76];
	for(i=0;i<7;i++) // FOR ALL CASES FROM 0 TO 6 WE RETURN THE SAME N AS ANSWER
	ans[i]=i;
	for(i=7;i<76;i++) // FOR ALL VALUES OF N FROM 7 TO 75 WE CALCULATE USING DP
	{
	    ans[i]=0;     // INITIALIZE ANS TO BE 0
	    for(j=1;j<=i-3;j++)   // VALID FOR KEYSTROKES FROM 1 TO I-3(BECAUSE WE LEAVE OUT CTRL A,CLTRL C,CTRL V)
	    ans[i]=max(ans[i],(i-j-1)*ans[j]); // NOW SET ANS[I] TO BE MAX OF (ANS[I] AND (I-J-1)*ANS[J])// IT IS I-J-1// TAKE MAX TO PRINT MAX NO OF A's
	}
	cin>>t;
	while(t--)
	{
	    cin>>n;
	    if(n<76)
	    cout<<ans[n]<<endl;
	    else
	    cout<<-1<<endl;
	}
	return 0;
}
