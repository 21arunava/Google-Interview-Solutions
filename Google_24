Given a collection of Intervals,merge all the overlapping Intervals.
For example:

Given [1,3], [2,6], [8,10], [15,18],

return [1,6], [8,10], [15,18].

Make sure the returned intervals are sorted.

 

Input:

The first line contains an integer T, depicting total number of test cases. 
Then following T lines contains an integer N depicting the number of Intervals and next line followed by the intervals starting and ending positions 'x' and 'y' respectively.


Output:

Print the intervals after overlapping in sorted manner.  There should be a newline at the end of output of every test case.

Constraints:

1 ≤ T ≤ 50
1 ≤ N ≤ 100
0 ≤ x ≤ y ≤ 100


Example:

Input
2
4
1 3 2 4 6 8 9 10
4
6 8 1 9 2 4 4 7

Output
1 4 6 8 9 10
1 9

SOLUTION::

/**
 * Definition for an interval.
 * struct Interval {
 *     int start;
 *     int end;
 *     Interval() : start(0), end(0) {}
 *     Interval(int s, int e) : start(s), end(e) {}
 * };
 */
bool mycomp(Interval A,Interval B)
{
    if(A.start<B.start)
    return true;
    else
    return false;
}
vector<Interval> Solution::merge(vector<Interval> &A) 
{
  int n=A.size();
  if(n<2)
  return A;
  sort(A.begin(),A.end(),mycomp);
  int first=0;
  for(int second=1;second<n;second++)
  {
      if(A[second].start<=A[first].end)
      {
          A[first].end=max(A[first].end,A[second].end);
      }
      else
      {
          ++first;// INCREMENT FIRST HERE
          A[first].start=A[second].start;
          A[first].end=A[second].end;
      }
  }
  A.erase(A.begin()+first+1,A.end());//DELETE OVERLAPPING INTERVALS FROM A.begin()+first+1 to A.end()
  return A;
}
