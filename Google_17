Given a 2D screen, location of a pixel in the screen ie(x,y) and a color(K), your task is to replace color of the given pixel and all adjacent same colored pixels with the given color K.

Input:
The first line of input contains an integer T denoting the no of test cases. Then T test cases follow. The first line of each test case contains Two integers N and M denoting the size of the matrix. Then in the next line are N*M space separated values of the matrix. Then in the next line are three values x, y and K.

Output:
For each test case print the space separated values of the new matrix.

Constraints:
1<=T<=10
1<=M[][]<=100

Example:
Input:
2
3 4
0 1 1 0 1 1 1 1 0 1 2 3
0 1 5
2 2
1 1 1 1
0 1 8

Output:
0 5 5 0 5 5 5 5 0 5 2 3
8 8 8 8

SOLUTION::
#include <iostream>
#include <vector>
using namespace std;

void flood_fill(vector<vector<int>>& pixels,int n, int m, int x, int y, int k, int prevK)
{
    if(pixels[x][y] == prevK)
    {
        pixels[x][y] = k;
        if(x+1 < n) 
        flood_fill(pixels, n, m, x+1, y, k, prevK);   
        if(y+1 < m) 
        flood_fill(pixels, n, m, x, y+1, k, prevK);   
        if(y-1 >= 0) 
        flood_fill(pixels, n, m, x, y-1, k, prevK);   
        if(x-1 >= 0) 
        flood_fill(pixels, n, m, x-1, y, k, prevK);   
    }
}

int main()
{
	int t;
	cin >> t;
	while(t--)
    {
	    int m,n,x,y,k;
	    cin >> n>> m;
	    vector<vector<int>> pixels(n, vector<int>(m));
	    for(int i = 0; i < n; i++)
	        for(int j = 0; j < m; j++)
	            cin >> pixels[i][j];
	    cin >> x >> y >> k;
	    
	    flood_fill(pixels, n, m, x, y, k, pixels[x][y]);
	    for(int i = 0; i < n; i++)
	        for(int j = 0; j < m; j++)
	            cout << pixels[i][j] << " ";
	         cout << endl;
	 }
	return 0;
}
