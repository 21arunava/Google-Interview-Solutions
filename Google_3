Given a matrix of size NxM where every element is either ‘O’ or ‘X’, replace ‘O’ with ‘X’ if surrounded by ‘X’. A ‘O’ (or a set of ‘O’) is considered to be by surrounded by ‘X’ if there are ‘X’ at locations just below, just above, just left and just right of it.

Examples:

Input: mat[N][M] =  {{'X', 'O', 'X', 'X', 'X', 'X'},
                     {'X', 'O', 'X', 'X', 'O', 'X'},
                     {'X', 'X', 'X', 'O', 'O', 'X'},
                     {'O', 'X', 'X', 'X', 'X', 'X'},
                     {'X', 'X', 'X', 'O', 'X', 'O'},
                     {'O', 'O', 'X', 'O', 'O', 'O'},
                    };
Output: mat[N][M] =  {{'X', 'O', 'X', 'X', 'X', 'X'},
                      {'X', 'O', 'X', 'X', 'X', 'X'},
                      {'X', 'X', 'X', 'X', 'X', 'X'},
                      {'O', 'X', 'X', 'X', 'X', 'X'},
                      {'X', 'X', 'X', 'O', 'X', 'O'},
                      {'O', 'O', 'X', 'O', 'O', 'O'},
                    };

Input: mat[N][M] =  {{'X', 'X', 'X', 'X'}
                     {'X', 'O', 'X', 'X'}
                     {'X', 'O', 'O', 'X'}
                     {'X', 'O', 'X', 'X'}
                     {'X', 'X', 'O', 'O'}
                    };
Output: mat[N][M] =  {{'X', 'X', 'X', 'X'}
                     {'X', 'X', 'X', 'X'}
                     {'X', 'X', 'X', 'X'}
                     {'X', 'X', 'X', 'X'}
                     {'X', 'X', 'O', 'O'}
                    };

Input:
The first line of input contains an integer T denoting the no of test cases. Then T test cases follow. The first line of each test case contains two integers N and M denoting the size of the matrix. Then in the next line are N*M space separated values of the matrix.

Output:
For each test case print the space separated values of the new matrix.

Constraints:
1<=T<=10
1<=mat[][]<=100
1<=n,m<=20

Example:
Input:
2
1 5
X O X O X 
3 3
X X X X O X X X X
Output:
X O X O X
X X X X X X X X X

Solution:

    #include <bits/stdc++.h>
    
    using namespace std;

    char mat[20][20];
    int flag[20][20];
    int R,C;

    void dfs(int i, int j)
    {
        flag[i][j] = 1;// flag[i][j]=1 SET TO 1
        
        if(i!=0 && mat[i-1][j] == 'O' && flag[i-1][j] == 0) // BOUNDARY 1 TOP
        dfs(i-1,j);
        if(i!=R-1 && mat[i+1][j] == 'O' && flag[i+1][j] == 0) // BOUNDARY 2 BOTTOM
        dfs(i+1,j);
        if(j!=0  && mat[i][j-1] == 'O' && flag[i][j-1] == 0) // BOUNDARY 3 LEFT
        dfs(i,j-1);
        if(j!=C-1 && mat[i][j+1] == 'O' && flag[i][j+1] == 0) // BOUNDARY 4  RIGHT
        dfs(i,j+1);
    }
    int main()
    {
        int t;
        cin>>t;
        while(t--)
        {
            cin>>R>>C;
            for(int i=0; i<R; i++)
            {
                for(int j=0; j<C; j++)
                {
                    cin>>mat[i][j];
                }
            }

            for(int i=0; i<R; i++)// FOR ROWS
            {
                if(mat[i][0] == 'O' && flag[i][0] == 0)
                    dfs(i,0);
                if(mat[i][C-1] == 'O' && flag[i][C-1] == 0)
                    dfs(i,C-1);
            }

            for(int j=0; j<C; j++)// FOR COLUMNS
            {
                if(mat[0][j] == 'O' && flag[0][j] == 0)
                    dfs(0,j);
                if(mat[R-1][j] == 'O' && flag[R-1][j] == 0)
                    dfs(R-1,j);
            }

            for(int i=0; i<R; i++)
            {
                for(int j=0; j<C; j++)
                {
                    if(mat[i][j] == 'O' && flag[i][j] == 0)// mat[i][j]=='O' && flag[i][j]==0// Necessary Condition
                        mat[i][j] = 'X';// set matrix[i][j] to 'X'
                    cout<<mat[i][j]<<" ";
                    flag[i][j] = 0;// reset it to zero
                }
                //cout<<endl;
            }
            cout<<endl;
        }
        return 0;
    }
